name: CI/CD Pipeline

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]

jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install clang-format
      run: sudo apt-get install -y clang-format
    
    - name: Check code formatting
      run: |
        find src -name "*.c" -o -name "*.h" | xargs clang-format --dry-run --Werror
    
    - name: Check CMake syntax
      run: cmake --version

  build-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build-type: [Release, Debug]
        exclude:
          - os: windows-latest
            build-type: Debug
          - os: macos-latest
            build-type: Debug
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          cmake \
          build-essential \
          liballegro5-dev \
          liballegro-acodec5-dev \
          liballegro-audio5-dev \
          liballegro-dialog5-dev \
          liballegro-font5-dev \
          liballegro-image5-dev \
          liballegro-memfile5-dev \
          liballegro-physfs5-dev \
          liballegro-primitives5-dev \
          liballegro-ttf5-dev \
          libphysfs-dev \
          libsurgescript-dev
    
    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew update
        brew install cmake allegro physfs surgescript
    
    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Install vcpkg
        git clone https://github.com/Microsoft/vcpkg.git
        cd vcpkg
        .\bootstrap-vcpkg.bat
        .\vcpkg integrate install
        .\vcpkg install allegro5:x64-windows physfs:x64-windows surgescript:x64-windows
    
    - name: Create build directory
      run: mkdir build
      shell: ${{ matrix.os == 'windows-latest' && 'cmd' || 'bash' }}
    
    - name: Configure CMake
      run: |
        cd build
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          cmake .. -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} \
                   -DCMAKE_TOOLCHAIN_FILE=../vcpkg/scripts/buildsystems/vcpkg.cmake \
                   -DVCPKG_TARGET_TRIPLET=x64-windows
        else
          cmake .. -DCMAKE_BUILD_TYPE=${{ matrix.build-type }}
        fi
      shell: bash
    
    - name: Build
      run: |
        cd build
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          cmake --build . --config ${{ matrix.build-type }} --parallel
        else
          make -j$(nproc 2>/dev/null || sysctl -n hw.ncpu 2>/dev/null || echo 2)
        fi
      shell: bash
    
    - name: Test executable
      run: |
        cd build
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          .\${{ matrix.build-type }}\opensurge.exe --help
        else
          ./opensurge --help
        fi
      shell: bash

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run security scan
      uses: securecodewarrior/github-action-add-sarif@v1
      with:
        sarif-file: 'security-scan-results.sarif'
    
    - name: Check for common security issues
      run: |
        # Check for hardcoded secrets
        if grep -r "password\|secret\|key" src/ --include="*.c" --include="*.h"; then
          echo "Warning: Potential hardcoded secrets found"
        fi
        
        # Check for buffer overflow vulnerabilities
        if grep -r "strcpy\|sprintf\|gets" src/ --include="*.c"; then
          echo "Warning: Potentially unsafe string functions found"
        fi
