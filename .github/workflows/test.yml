name: Test Suite

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]
  schedule:
    - cron: '0 2 * * 0'  # Run weekly on Sunday at 2 AM

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          cmake \
          build-essential \
          liballegro5-dev \
          liballegro-acodec5-dev \
          liballegro-audio5-dev \
          liballegro-dialog5-dev \
          liballegro-font5-dev \
          liballegro-image5-dev \
          liballegro-memfile5-dev \
          liballegro-physfs5-dev \
          liballegro-primitives5-dev \
          liballegro-ttf5-dev \
          libphysfs-dev \
          libsurgescript-dev \
          valgrind
    
    - name: Create build directory
      run: mkdir build
    
    - name: Configure CMake with tests
      run: |
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Debug \
                 -DBUILD_TESTS=ON
    
    - name: Build
      run: |
        cd build
        make -j$(nproc)
    
    - name: Run basic tests
      run: |
        cd build
        ./opensurge --help
        ./opensurge --version
    
    - name: Test level loading
      run: |
        cd build
        # Test if the engine can load basic levels
        timeout 10s ./opensurge --level levels/demo-1.lev || true
    
    - name: Memory leak check
      run: |
        cd build
        valgrind --leak-check=full --error-exitcode=1 ./opensurge --help

  integration-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          cmake \
          build-essential \
          liballegro5-dev \
          liballegro-acodec5-dev \
          liballegro-audio5-dev \
          liballegro-dialog5-dev \
          liballegro-font5-dev \
          liballegro-image5-dev \
          liballegro-memfile5-dev \
          liballegro-physfs5-dev \
          liballegro-primitives5-dev \
          liballegro-ttf5-dev \
          libphysfs-dev \
          libsurgescript-dev \
          xvfb
    
    - name: Create build directory
      run: mkdir build
    
    - name: Configure CMake
      run: |
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release
    
    - name: Build
      run: |
        cd build
        make -j$(nproc)
    
    - name: Test with virtual display
      run: |
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 &
        sleep 2
        cd build
        timeout 30s ./opensurge --level levels/demo-1.lev || true

  script-validation:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Validate SurgeScript files
      run: |
        # Check for syntax errors in SurgeScript files
        find scripts -name "*.ss" -exec echo "Checking {}" \;
        
        # Basic syntax validation (you might want to add a proper SurgeScript parser)
        for file in $(find scripts -name "*.ss"); do
          echo "Validating $file"
          # Check for basic syntax issues
          if grep -q "function.*{" "$file" && ! grep -q "}" "$file"; then
            echo "Error: Unclosed function in $file"
            exit 1
          fi
        done
    
    - name: Check level files
      run: |
        # Validate level files exist and are readable
        for level in levels/*.lev; do
          if [ -f "$level" ]; then
            echo "Checking level: $level"
            # Basic validation - check if file is not empty
            if [ ! -s "$level" ]; then
              echo "Error: Empty level file $level"
              exit 1
            fi
          fi
        done
    
    - name: Check sprite files
      run: |
        # Validate sprite files
        for sprite in sprites/**/*.spr; do
          if [ -f "$sprite" ]; then
            echo "Checking sprite: $sprite"
            # Basic validation
            if [ ! -s "$sprite" ]; then
              echo "Error: Empty sprite file $sprite"
              exit 1
            fi
          fi
        done

  performance-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          cmake \
          build-essential \
          liballegro5-dev \
          liballegro-acodec5-dev \
          liballegro-audio5-dev \
          liballegro-dialog5-dev \
          liballegro-font5-dev \
          liballegro-image5-dev \
          liballegro-memfile5-dev \
          liballegro-physfs5-dev \
          liballegro-primitives5-dev \
          liballegro-ttf5-dev \
          libphysfs-dev \
          libsurgescript-dev
    
    - name: Create build directory
      run: mkdir build
    
    - name: Configure CMake
      run: |
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release
    
    - name: Build
      run: |
        cd build
        make -j$(nproc)
    
    - name: Performance benchmark
      run: |
        cd build
        echo "Starting performance test..."
        time timeout 60s ./opensurge --level levels/demo-1.lev || true
        echo "Performance test completed"

  compatibility-tests:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, ubuntu-22.04, ubuntu-latest]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          cmake \
          build-essential \
          liballegro5-dev \
          liballegro-acodec5-dev \
          liballegro-audio5-dev \
          liballegro-dialog5-dev \
          liballegro-font5-dev \
          liballegro-image5-dev \
          liballegro-memfile5-dev \
          liballegro-physfs5-dev \
          liballegro-primitives5-dev \
          liballegro-ttf5-dev \
          libphysfs-dev \
          libsurgescript-dev
    
    - name: Create build directory
      run: mkdir build
    
    - name: Configure CMake
      run: |
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release
    
    - name: Build
      run: |
        cd build
        make -j$(nproc)
    
    - name: Test compatibility
      run: |
        cd build
        ./opensurge --help
        echo "Compatibility test passed on ${{ matrix.os }}"
