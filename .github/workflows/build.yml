name: Build Open Surge Engine

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  release:
    types: [ published ]

jobs:
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build-type: [Release, Debug]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          cmake \
          build-essential \
          liballegro5-dev \
          liballegro5.2-dev \
          liballegro-acodec5-dev \
          liballegro-audio5-dev \
          liballegro-dialog5-dev \
          liballegro-font5-dev \
          liballegro-image5-dev \
          liballegro-memfile5-dev \
          liballegro-physfs5-dev \
          liballegro-primitives5-dev \
          liballegro-ttf5-dev \
          libphysfs-dev \
          libsurgescript-dev
    
    - name: Create build directory
      run: mkdir build && cd build
    
    - name: Configure CMake
      run: |
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} \
                 -DCMAKE_INSTALL_PREFIX=/usr/local
    
    - name: Build
      run: |
        cd build
        make -j$(nproc)
    
    - name: Test
      run: |
        cd build
        ./opensurge --help
    
    - name: Install
      run: |
        cd build
        sudo make install
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: opensurge-linux-${{ matrix.build-type }}
        path: build/opensurge
        retention-days: 30

  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        build-type: [Release, Debug]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install dependencies
      run: |
        # Install vcpkg for dependencies
        git clone https://github.com/Microsoft/vcpkg.git
        cd vcpkg
        .\bootstrap-vcpkg.bat
        .\vcpkg integrate install
        .\vcpkg install allegro5:x64-windows physfs:x64-windows surgescript:x64-windows
    
    - name: Create build directory
      run: mkdir build
      shell: cmd
    
    - name: Configure CMake
      run: |
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} \
                 -DCMAKE_TOOLCHAIN_FILE=../vcpkg/scripts/buildsystems/vcpkg.cmake \
                 -DVCPKG_TARGET_TRIPLET=x64-windows
      shell: cmd
    
    - name: Build
      run: |
        cd build
        cmake --build . --config ${{ matrix.build-type }} --parallel
      shell: cmd
    
    - name: Test
      run: |
        cd build
        .\${{ matrix.build-type }}\opensurge.exe --help
      shell: cmd
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: opensurge-windows-${{ matrix.build-type }}
        path: build/${{ matrix.build-type }}/opensurge.exe
        retention-days: 30

  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        build-type: [Release, Debug]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install dependencies
      run: |
        brew update
        brew install cmake allegro physfs surgescript
    
    - name: Create build directory
      run: mkdir build
    
    - name: Configure CMake
      run: |
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} \
                 -DCMAKE_INSTALL_PREFIX=/usr/local
    
    - name: Build
      run: |
        cd build
        make -j$(sysctl -n hw.ncpu)
    
    - name: Test
      run: |
        cd build
        ./opensurge --help
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: opensurge-macos-${{ matrix.build-type }}
        path: build/opensurge
        retention-days: 30

  build-android:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential
    
    - name: Create build directory
      run: mkdir build
    
    - name: Configure CMake for Android
      run: |
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release \
                 -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_ROOT/build/cmake/android.toolchain.cmake \
                 -DANDROID_ABI=arm64-v8a \
                 -DANDROID_PLATFORM=android-21
    
    - name: Build Android
      run: |
        cd build
        make -j$(nproc)
    
    - name: Upload Android build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: opensurge-android
        path: build/libopensurge.so
        retention-days: 30

  create-release:
    if: github.event_name == 'release'
    needs: [build-linux, build-windows, build-macos]
    runs-on: ubuntu-latest
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Create release archive
      run: |
        mkdir -p release
        # Copy artifacts to release directory
        find . -name "opensurge-linux-Release" -exec cp {} release/opensurge-linux \;
        find . -name "opensurge-windows-Release" -exec cp {} release/opensurge-windows.exe \;
        find . -name "opensurge-macos-Release" -exec cp {} release/opensurge-macos \;
        
        # Create archives
        tar -czf opensurge-linux.tar.gz -C release opensurge-linux
        zip opensurge-windows.zip release/opensurge-windows.exe
        tar -czf opensurge-macos.tar.gz -C release opensurge-macos
    
    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./opensurge-linux.tar.gz
        asset_name: opensurge-linux.tar.gz
        asset_content_type: application/gzip
    
    - name: Upload Windows release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./opensurge-windows.zip
        asset_name: opensurge-windows.zip
        asset_content_type: application/zip
    
    - name: Upload macOS release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./opensurge-macos.tar.gz
        asset_name: opensurge-macos.tar.gz
        asset_content_type: application/gzip

  test-build:
    runs-on: ubuntu-latest
    needs: build-linux
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: opensurge-linux-Release
    
    - name: Test game functionality
      run: |
        chmod +x opensurge
        ./opensurge --help
        # Add more tests here as needed
